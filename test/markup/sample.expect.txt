<span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;core:fmt&quot;</span>

<span class="hljs-struct"><span class="hljs-title">Foo</span> :: <span class="hljs-keyword">struct</span> {
    x: <span class="hljs-type">int</span>,
    y: <span class="hljs-type">string</span>,
    z: <span class="hljs-type">bool</span>
    bar: <span class="hljs-type">Bar</span>
    bar_p: <span class="hljs-meta">^</span><span class="hljs-type">Bar</span>
    vector: [<span class="hljs-number">3</span>]<span class="hljs-type">f32</span>
    dyn: [<span class="hljs-keyword">dynamic</span>]<span class="hljs-type">Bar</span>
    dyn_p: [<span class="hljs-keyword">dynamic</span>]<span class="hljs-meta">^</span><span class="hljs-type">Bar</span>
    matrix:[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]<span class="hljs-type">f32</span>
    rl_vec: <span class="hljs-type">rl.Vector2</span>
    rl_vec_arr: [<span class="hljs-number">4</span>]<span class="hljs-type">rl.Vector2</span>
    rl_vec_p: <span class="hljs-meta">^</span><span class="hljs-type">rl.Vector2</span>
    rl_vec_p_arr: [<span class="hljs-number">4</span>]<span class="hljs-meta">^</span><span class="hljs-type">rl.Vector2</span>
}</span>

<span class="hljs-function"><span class="hljs-title">main</span> :: <span class="hljs-keyword">proc</span><span class="hljs-params">()</span> {</span>
    x: <span class="hljs-type">f32</span> 
    x = <span class="hljs-number">1.0</span>
    y := <span class="hljs-number">2</span>
    pi :: <span class="hljs-number">3.14</span>
    str := <span class="hljs-string">&quot;Odin&quot;</span>
    r := <span class="hljs-string">&#x27;O&#x27;</span>
    vector: [<span class="hljs-number">3</span>]<span class="hljs-type">f32</span>
    p: <span class="hljs-meta">^</span><span class="hljs-type">int</span>
    
    <span class="hljs-built_in">do_something_with</span>(<span class="hljs-meta">&amp;</span>x)

    foo := <span class="hljs-built_in">new</span>(Foo)

    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i += <span class="hljs-number">1</span> { }
    <span class="hljs-keyword">if</span> x &gt; y { }

    fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Hellope!&quot;</span>)

    <span class="hljs-keyword">switch</span> arch := ODIN_ARCH; arch {
    <span class="hljs-keyword">case</span> .i386, .wasm32, .arm32:
    fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;32 bit&quot;</span>)
    <span class="hljs-keyword">case</span> .amd64, .wasm64p32, .arm64, .riscv64:
    fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;64 bit&quot;</span>)
    <span class="hljs-keyword">case</span> .Unknown:
    fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Unknown architecture&quot;</span>)
    }
    
    <span class="hljs-built_in">multiply</span>(<span class="hljs-built_in">int</span>(x), <span class="hljs-number">2.3</span>))
    <span class="hljs-built_in">divide</span>(pi,x)
}

<span class="hljs-function"><span class="hljs-title">multiply</span> :: <span class="hljs-keyword">proc</span><span class="hljs-params">(x: <span class="hljs-type">int</span>, y: <span class="hljs-type">int</span>)</span> -&gt; <span class="hljs-type">f32</span> {
</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">f32</span>(x * y)
}

<span class="hljs-function"><span class="hljs-title">increment</span> :: <span class="hljs-keyword">proc</span><span class="hljs-params">(x: <span class="hljs-meta">^</span><span class="hljs-type">int</span>)</span> {</span>
    x = x + <span class="hljs-number">1</span>
}

<span class="hljs-function"><span class="hljs-title">do_something_with_matrix</span> :: <span class="hljs-keyword">proc</span><span class="hljs-params">(mat: [<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]<span class="hljs-type">f32</span>)</span> -&gt; [<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]<span class="hljs-type">f32</span> { }
</span>
<span class="hljs-function"><span class="hljs-title">make_rl_vector</span> :: <span class="hljs-keyword">proc</span><span class="hljs-params">(x, y: <span class="hljs-type">f32</span>)</span> -&gt; <span class="hljs-type">rl.Vector2</span> {
</span>    <span class="hljs-keyword">return</span> rl.Vector2{x,y}
}
